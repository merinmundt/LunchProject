package LetsDoLunch;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.TreeSet;

public class Lunch {

    public static void main(String[] args) {
        
    	ArrayList<String> mapNodes = new ArrayList<String>();
        String Input = null;
        int index=0;
        int AvoidIndex;
        int PeggyIndex;
        int SamIndex;
       
        try {
        	
        	
        	InputStreamReader in= new InputStreamReader(System.in);
            BufferedReader read = new BufferedReader(in);
            Input = read.readLine();
            while (Input != null) {
            	mapNodes.add(Input);
            }
            read.close();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        
        AvoidIndex=mapNodes.indexOf("Avoid:");
        PeggyIndex=mapNodes.indexOf("Peggy:");
        SamIndex=mapNodes.indexOf("Sam:");
        
        
        String[] PeggyNodes=new String[AvoidIndex-1]; // Index 1 is for Peggy
        String[] PeggyDest=new String[AvoidIndex-1];
        String[] SamNodes=new String[AvoidIndex-1]; // Index 2 is for Sam
        String[] SamDest=new String[AvoidIndex-1];
        String[] SortedDest=new String[AvoidIndex-1]; // this is used to sort the source nodes for Sam
        
        for (index=1; index<AvoidIndex; index++){ //for items between Map: and Avoid:
            String[] LineString = mapNodes.get(index).split(" ");
            
            PeggyNodes[index-1]=LineString[0]; // Add the first element to the source nodes
            
            PeggyDest[index-1]=LineString[1]; // Add the second element to the DestNodes
            
            SortedDest[index-1]=PeggyDest[index-1]+" "+PeggyNodes[index-1];
        }
        
        Arrays.sort(SortedDest); // Since Destination nodes are not necessarily sorted, SortedDest is used to sort them
        for (index=0;index<SortedDest.length;index++){
            String[] LineString=SortedDest[index].split(" ");
            SamNodes[index]=LineString[0]; // Source nodes in the map used by Sam
            SamDest[index]=LineString[1];       // Dest nodes in the map used by Sam
        }
        
        
        String[] AvoidList=mapNodes.get(AvoidIndex+1).split(" "); // Get the avoid list
        String[] PeggyStartsAt=mapNodes.get(PeggyIndex+1).split(" "); // Peggy start points
        String[] SamStartsAt=mapNodes.get(SamIndex+1).split(" "); // Sam start points
        TreeSet< String> PeggyReachableSet=ReachableSet(PeggyNodes,PeggyDest,AvoidList,PeggyStartsAt);
        TreeSet< String> SamReachableSet=ReachableSet(SamNodes,SamDest,AvoidList,SamStartsAt);
        PeggyReachableSet.retainAll(SamReachableSet); // Find the common reachable set for Peggy and Sam
        for (String output:PeggyReachableSet){
            System.out.println(output);
        }
    }
    
    public static TreeSet<String> ReachableSet(String[] SourceNodes, String[] DestNodes, String[] AvoidList,String[] StartsAt){
        TreeSet< String> ReachableSet=new TreeSet<String>();
        Queue<String> q=new LinkedList<String>();
        for (String s:StartsAt){q.add(s);}    // Add the root nodes to the queue
        while(!q.isEmpty()){
            String element = q.remove();
            if (!Arrays.asList(AvoidList).contains(element)){
                ReachableSet.add(element);
                int index=Arrays.asList(SourceNodes).indexOf(element);
                if (index!=-1) { // Since the input is sorted we just check the next lines to see if there is any child node
                    q.add(DestNodes[index]);
                    while (index<(SourceNodes.length-1)&&SourceNodes[index+1].equals(element)) {
                        q.add(DestNodes[index+1]);
                        index++;
                    }
                }
            }
        }
        return ReachableSet;
    }
}
